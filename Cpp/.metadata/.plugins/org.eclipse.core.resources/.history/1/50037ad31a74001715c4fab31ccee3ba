/*
 * Database.cpp
 *
 *  Created on: 28 de jul de 2017
 *      Author: anderson
 */

#include "Database.h"

Database::Database(std::string databaseFile)
{
	if (sqlite3_open(databaseFile.c_str(), &m_db) != SQLITE_OK)
	{
			error_cant_open();
	}

}

Database::~Database()
{
	sqlite3_close(db);
}

int Database::get(std::string table, std::string thecolumn,
		std::list<std::string>& out_values)
{
	out_values.push_back("1.1");
	out_values.push_back("2.1");
	out_values.push_back("3.1");
	out_values.push_back("4.1");
	out_values.push_back("5.1");
	out_values.push_back("6.1");
	out_values.push_back("7.1");

	return (DATABASE_SUCCSESS);
}

int Database::get_where(std::string table, std::string thecolumn,
		std::string where_constraint, std::list<std::string>& out_values)
{
	out_values.push_back("1");
	out_values.push_back("2");
	out_values.push_back("3");
	out_values.push_back("4");
	out_values.push_back("5");
	out_values.push_back("6");
	out_values.push_back("7");
	out_values.push_back("8");
	out_values.push_back("8");
	out_values.push_back("10");

	return (DATABASE_SUCCSESS);
}

int Database::join(std::string table1, std::string table2,
		std::string thecolumn, std::string on_constraint,
		std::list<std::string>& out_values)
{
	out_values.push_back("1");
	out_values.push_back("2");
	out_values.push_back("3");
	out_values.push_back("4");
	out_values.push_back("5");
	out_values.push_back("6");
	out_values.push_back("7");
	out_values.push_back("8");
	out_values.push_back("8");
	out_values.push_back("10");
	out_values.push_back("1");
	out_values.push_back("2");
	out_values.push_back("3");
	out_values.push_back("4");
	out_values.push_back("5");
	out_values.push_back("6");
	out_values.push_back("7");
	out_values.push_back("8");
	out_values.push_back("8");
	out_values.push_back("10");

	return (DATABASE_SUCCSESS);
}

int Database::get(std::string table, std::string thecolumn,
		std::list<double>& out_values)
{
	std::list<std::string> out_str;

	get(table, thecolumn, out_str);
	string_to_double(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

int Database::get_where(std::string table, std::string thecolumn,
		std::string where_constraint, std::list<double>& out_values)
{
	std::list<std::string> out_str;

	get_where(table, thecolumn, where_constraint, out_str);
	string_to_double(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

int Database::join(std::string table1, std::string table2,
		std::string thecolumn, std::string on_constraint,
		std::list<double>& out_values)
{
	std::list<std::string> out_str;

	join(table1, table2, thecolumn, on_constraint, out_str);
	string_to_double(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

int Database::get(std::string table, std::string thecolumn,
		std::list<int>& out_values)
{
	std::list<std::string> out_str;

	get(table, thecolumn, out_str);
	string_to_int(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

int Database::get_where(std::string table, std::string thecolumn,
		std::string where_constraint, std::list<int>& out_values)
{
	std::list<std::string> out_str;

	get_where(table, thecolumn, where_constraint, out_str);
	string_to_int(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

int Database::join(std::string table1, std::string table2,
		std::string thecolumn, std::string on_constraint,
		std::list<int>& out_values)
{
	std::list<std::string> out_str;

	join(table1, table2, thecolumn, on_constraint, out_str);
	string_to_int(out_str, out_values);

	return (DATABASE_SUCCSESS);
}

void Database::string_to_int(std::list<std::string> inlist,
		std::list<int>& outlist)
{

	for (std::list<std::string>::iterator it = inlist.begin();
			it != inlist.end(); it++)
	{
		outlist.push_back(std::stoi(*it));
	}
}

void Database::string_to_double(std::list<std::string> inlist,
		std::list<double>& outlist)
{
	for (std::list<std::string>::iterator it = inlist.begin();
			it != inlist.end(); it++)
	{
		outlist.push_back(std::stof(*it));
	}
}

void Database::error_cant_open()
{
	fprintf(stderr, "DatabaseSqlite3 Error: Can't open database: %s\n",
			sqlite3_errmsg(m_db));
	sqlite3_close (db);
	exit(DATABASE_CANT_OPEN);
}

void Database::error_failed_to_fetch()
{
	fprintf(stderr, "DatabaseSqlite3 Error: Failed to fetch data: %s\n",
			sqlite3_errmsg(m_db));
	sqlite3_close (db);
	exit(DATABASE_FAILED_FETCH_DATA);
}

void Database::error_table_not_found()
{
	fprintf(stderr, "DatabaseSqlite3 Error: Table not found: %s\n",
			sqlite3_errmsg(m_db));
	sqlite3_close (db);
	exit(DATABASE_TABLE_NOT_FOUND);
}

void Database::error_column_not_found()
{
	fprintf(stderr, "DatabaseSqlite3 Error: Column not found: %s\n",
			sqlite3_errmsg(m_db));
	sqlite3_close (db);
	exit(DATABASE_COLUMN_NOT_FOUND);
}
