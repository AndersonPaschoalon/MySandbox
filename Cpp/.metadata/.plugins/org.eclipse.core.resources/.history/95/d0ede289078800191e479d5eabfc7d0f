//============================================================================
// Name        : Test_libxml2.cpp
// Author      : Anderson Paschoalon
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <stdio.h>
#include <libxml/xmlreader.h>
#include <iostream>

using namespace std;

// testes
 void reader1_1();
 void reader1_2();

 void streamFile(const char *filename);
 void streamFile(const char *filename);

int main()
{



    bool test01 = false;
    bool test02 = true;
    bool test03 = true;
    bool test04 = true;
    bool test05 = true;
    bool test06 = true;
    bool test07 = true;
    bool test08 = true;
    bool test09 = true;
    bool test10 = true;
    bool test11 = true;

    if (test01)
        reader1_1();
    else if (test02)
        reader1_2();

    return 0;
}

void printHeader(const char* msg)
{
    const char header[] = "###############################################################################";
    printf("%s\n# %s\n%s\n\n", header, msg, header );
}

void reader1_2()
{
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    LIBXML_TEST_VERSION
    const char file_01[] = "xml/plant_catalog.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}

void reader1_1()
{
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    //LIBXML_TEST_VERSION
    const char file_01[] = "xml/file_01.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}

/**
 * processNode:
 * @reader: the xmlReader
 *
 * Dump information about the current node
 */
void processNode(xmlTextReaderPtr reader)
{
    const xmlChar *name, *value;

    name = xmlTextReaderConstName(reader);
    if (name == NULL)
        name = BAD_CAST "--";

    value = xmlTextReaderConstValue(reader);

    printf("%d %d %s %d %d", xmlTextReaderDepth(reader),
            xmlTextReaderNodeType(reader), name,
            xmlTextReaderIsEmptyElement(reader), xmlTextReaderHasValue(reader));
    if (value == NULL)
        printf("\n");
    else
    {
        if (xmlStrlen(value) > 40)
            printf(" %.40s...\n", value);
        else
            printf(" %s\n", value);
    }
}

/**
 * streamFile:
 * @filename: the file name to parse
 *
 * Parse, validate and print information about an XML file.
 */
void streamFile(const char *filename)
{
    xmlTextReaderPtr reader;
    int ret;

    /*
     * Pass some special parsing options to activate DTD attribute defaulting,
     * entities substitution and DTD validation
     */
    reader = xmlReaderForFile(filename, NULL, XML_PARSE_DTDATTR | /* default DTD attributes */
    XML_PARSE_NOENT | /* substitute entities */
    XML_PARSE_DTDVALID); /* validate with the DTD */
    if (reader != NULL)
    {
        ret = xmlTextReaderRead(reader);
        while (ret == 1)
        {
            processNode(reader);
            ret = xmlTextReaderRead(reader);
        }
        /*
         * Once the document has been fully parsed check the validation results
         */
        if (xmlTextReaderIsValid(reader) != 1)
        {
            fprintf(stderr, "Document %s does not validate\n", filename);
        }
        xmlFreeTextReader(reader);
        if (ret != 0)
        {
            fprintf(stderr, "%s : failed to parse\n", filename);
        }
    }
    else
    {
        fprintf(stderr, "Unable to open %s\n", filename);
    }
}

