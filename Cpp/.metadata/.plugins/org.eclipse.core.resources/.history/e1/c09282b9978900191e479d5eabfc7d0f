/*
 * libxml.cpp
 *
 *  Created on: 07/06/2019
 *      Author: anderson
 */
#include "libxml.h"


void reader1_1()
{
    printHeader("reader1_1");
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    //LIBXML_TEST_VERSION
    const char file_01[] = "xml/file_01.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}


void reader1_2()
{
    printHeader("reader1_2");
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    LIBXML_TEST_VERSION
    const char file_01[] = "xml/plant_catalog.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}


/**
 * processNode:
 * @reader: the xmlReader
 *
 * Dump information about the current node
 */
void processNode(xmlTextReaderPtr reader)
{
    const xmlChar *name, *value;

    name = xmlTextReaderConstName(reader);
    if (name == NULL)
        name = BAD_CAST "--";

    value = xmlTextReaderConstValue(reader);

    printf("name:%s, xmlTextReaderDepth:%d, xmlTextReaderNodeType:%d, xmlTextReaderIsEmptyElement:%d, xmlTextReaderHasValue:%d\n",
            name,
            xmlTextReaderDepth(reader),
            xmlTextReaderNodeType(reader),
            xmlTextReaderIsEmptyElement(reader),
            xmlTextReaderHasValue(reader));
    if (value == NULL)
        printf("name:%s, value:NULL \n", name);
    else
    {
        if (xmlStrlen(value) > 40)
            printf("name:%s, value:%.40s...\n", name, value);
        else
            printf("name:%s, value:%s\n", name, value);
    }
    printf("\n");
}

/**
 * streamFile:
 * @filename: the file name to parse
 *
 * Parse, validate and print information about an XML file.
 */
void streamFile(const char *filename)
{
    xmlTextReaderPtr reader;
    int ret;

    /*
     * Pass some special parsing options to activate DTD attribute defaulting,
     * entities substitution and DTD validation
     */
    reader = xmlReaderForFile(filename, NULL, XML_PARSE_DTDATTR | /* default DTD attributes */
    XML_PARSE_NOENT | /* substitute entities */
    XML_PARSE_DTDVALID); /* validate with the DTD */
    if (reader != NULL)
    {
        ret = xmlTextReaderRead(reader);
        while (ret == 1)
        {
            processNode(reader);
            ret = xmlTextReaderRead(reader);
        }
        /*
         * Once the document has been fully parsed check the validation results
         */
        //if (xmlTextReaderIsValid(reader) != 1)
        //{
        //    fprintf(stderr, "Document %s does not validate\n", filename);
        //}
        //xmlFreeTextReader(reader);
        //if (ret != 0)
        //{
        //    fprintf(stderr, "%s : failed to parse\n", filename);
        //}
    }
    else
    {
        fprintf(stderr, "Unable to open %s\n", filename);
    }
}


