/*
 * libxml.cpp
 *
 *  Created on: 07/06/2019
 *      Author: anderson
 */
#include "libxml.h"

void printHeader(const char* msg)
{
    const char header[] = "###############################################################################";
    printf("\n%s\n# %s\n%s\n\n", header, msg, header );
}

void reader1_1()
{
    printHeader("reader1_1");
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    //LIBXML_TEST_VERSION
    const char file_01[] = "xml/file_01.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}


void reader1_2()
{
    printHeader("reader1_2");
    /*
     * this initialize the library and check potential ABI mismatches
     * between the version it was compiled for and the actual shared
     * library used.
     */
    LIBXML_TEST_VERSION
    const char file_01[] = "xml/plant_catalog.xml";
    streamFile(file_01);

    /*
     * Cleanup function for the XML library.
     */
    xmlCleanupParser();
    /*
     * this is to debug memory for regression tests
     */
    xmlMemoryDump();
}


/**
 * processNode:
 * @reader: the xmlReader
 *
 * Dump information about the current node
 */
void processNode(xmlTextReaderPtr reader)
{
    const xmlChar *name, *value;

    name = xmlTextReaderConstName(reader);
    if (name == NULL)
        name = BAD_CAST "--";

    value = xmlTextReaderConstValue(reader);

    printf("name:%s, xmlTextReaderDepth:%d, xmlTextReaderNodeType:%d, xmlTextReaderIsEmptyElement:%d, xmlTextReaderHasValue:%d\n",
            name,
            xmlTextReaderDepth(reader),
            xmlTextReaderNodeType(reader),
            xmlTextReaderIsEmptyElement(reader),
            xmlTextReaderHasValue(reader));
    if (value == NULL)
        printf("name:%s, value:NULL \n", name);
    else
    {
        if (xmlStrlen(value) > 40)
            printf("name:%s, value:%.40s...\n", name, value);
        else
            printf("name:%s, value:%s\n", name, value);
    }
    printf("\n");
}

/**
 * streamFile:
 * @filename: the file name to parse
 *
 * Parse, validate and print information about an XML file.
 */
void streamFile(const char *filename)
{
    xmlTextReaderPtr reader;
    int ret;

    /*
     * Pass some special parsing options to activate DTD attribute defaulting,
     * entities substitution and DTD validation
     */
    reader = xmlReaderForFile(filename, NULL, XML_PARSE_DTDATTR | /* default DTD attributes */
    XML_PARSE_NOENT | /* substitute entities */
    XML_PARSE_DTDVALID); /* validate with the DTD */
    if (reader != NULL)
    {
        ret = xmlTextReaderRead(reader);
        while (ret == 1)
        {
            processNode(reader);
            ret = xmlTextReaderRead(reader);
        }
        /*
         * Once the document has been fully parsed check the validation results
         */
        //if (xmlTextReaderIsValid(reader) != 1)
        //{
        //    fprintf(stderr, "Document %s does not validate\n", filename);
        //}
        //xmlFreeTextReader(reader);
        //if (ret != 0)
        //{
        //    fprintf(stderr, "%s : failed to parse\n", filename);
        //}
    }
    else
    {
        fprintf(stderr, "Unable to open %s\n", filename);
    }
}


void tutorial_Parsing_the_file()
{
    printHeader("Parsing the file");
    /////////////////////////////////////////////////////

    const char* docname = "xml/sample.xml"; // in
    xmlDocPtr doc;                          // out
    xmlNodePtr cur;                         // out

    doc = xmlParseFile(docname);

    if (doc == NULL ) {
        fprintf(stderr,"Document not parsed successfully. \n");
        return;
    }

    cur = xmlDocGetRootElement(doc);

    if (cur == NULL) {
        fprintf(stderr,"empty document\n");
        xmlFreeDoc(doc);
        return;
    }
    if (xmlStrcmp(cur->name, (const xmlChar *) "story")) {
        fprintf(stderr,"document of the wrong type, root node != story");
        xmlFreeDoc(doc);
        return;
    }

    /////////////////////////////////////////////
    printHeader("Retrieving Element Content");
    const xmlChar * path1 = (const xmlChar *)"storyinfo";  //in
    const xmlChar * path2 = (const xmlChar *)"keyword";    //in
    const xmlChar * atrName  = (const xmlChar *)"uri";      //in

    cur = cur->xmlChildrenNode;
    while (cur != NULL)
    {
        if ((!xmlStrcmp(cur->name, (const xmlChar *)path1)))
        {
            xmlChar *key;
            xmlChar *attr;
            cur = cur->xmlChildrenNode;
            while (cur != NULL)
            {
                if ((!xmlStrcmp(cur->name, (const xmlChar *)path2)))
                {
                    key = xmlNodeListGetString(doc, cur->xmlChildrenNode, 1);  // out
                    attr = xmlGetProp(cur, (const xmlChar *)atrName);            // out
                    printf("keyword: %s\n", key);
                    printf("attribute: %s\n", attr);
                    xmlFree(key);
                }
                cur = cur->next;
            }
        }
        cur = cur->next;
    }
}

void tutorial_xpath()
{
    printHeader("XPath tutorial");
    xmlChar *key;
    xmlNodeSetPtr nodeset;
    const char* docname = "xml/sample.xml"; // in
    xmlChar *xpath = (xmlChar*) "//story//keyword";
    xmlDocPtr doc;
    xmlXPathObjectPtr result;
    int i = 0;

    doc = getdoc(docname);
    result = getnodeset (doc, xpath);
    if (result) {
        nodeset = result->nodesetval;
        for (i=0; i < nodeset->nodeNr; i++)
        {
            key = xmlNodeListGetString(doc, nodeset->nodeTab[i]->xmlChildrenNode, 1);
            printf("key: %s\n", key);
            xmlFree(key);
        }
        xmlXPathFreeObject (result);
    }

    xmlFreeDoc(doc);
    xmlCleanupParser();
}

xmlDocPtr getdoc (const char *docname)
{
    xmlDocPtr doc;
    doc = xmlParseFile(docname);

    if (doc == NULL ) {
        fprintf(stderr,"Document not parsed successfully. \n");
        return NULL;
    }
    return doc;
}

xmlXPathObjectPtr getnodeset (xmlDocPtr doc, xmlChar *xpath)
{
    xmlXPathContextPtr context;
    xmlXPathObjectPtr result;

    context = xmlXPathNewContext(doc);
    if (context == NULL) {
        printf("Error in xmlXPathNewContext\n");
        return NULL;
    }
    result = xmlXPathEvalExpression(xpath, context);
    xmlXPathFreeContext(context);
    if (result == NULL) {
        printf("Error in xmlXPathEvalExpression\n");
        return NULL;
    }
    if(xmlXPathNodeSetIsEmpty(result->nodesetval)){
        xmlXPathFreeObject(result);
                printf("No result\n");
        return NULL;
    }
    return result;
}
