/*
 * Database.h
 *
 *  Created on: 28 de jul de 2017
 *      Author: anderson
 */

#ifndef DATABASE_H_
#define DATABASE_H_

#include <sqlite3.h>
#include <iostream>
#include <string>
#include <string.h>
#include <list>



template<typename T>
void printList(std::list<T>& theList)
{
	std::cout << "[";
	for (typename std::list<T>::iterator it = theList.begin();
			it != theList.end(); it++)
	{
		std::cout << *it << ", ";
	}
	std::cout << "]" << std::endl;
}

/**
 * Used if the database operations was succeed
 */
const int DATABASE_SUCCSESS = 0;

/**
 * Used if the database operations wasn't succeed
 */
const int DATABASE_ERROR = -1;


class Database
{
public:

	/**
	 * Constructor. Open the connection
	 */
	Database(std::string databaseFile);

	/**
	 * Destructor. Close the connection
	 */
	virtual ~Database();

	// string queries

	int get(std::string table, std::string thecolumn,
			std::list<std::string>& out_values);

	int get_where(std::string table, std::string thecolumn,
			std::string where_constraint, std::list<std::string>& out_values);

	int join(std::string table1, std::string table2, std::string thecolumn,
			std::string on_constraint, std::list<std::string>& out_values);

	// double queries

	int get(std::string table, std::string thecolumn,
			std::list<double>& out_values);

	int get_where(std::string table, std::string thecolumn,
			std::string where_constraint, std::list<double>& out_values);

	int join(std::string table1, std::string table2, std::string thecolumn,
			std::string on_constraint, std::list<double>& out_values);

	// int queries

	int get(std::string table, std::string thecolumn,
			std::list<int>& out_values);

	int get_where(std::string table, std::string thecolumn,
			std::string where_constraint, std::list<int>& out_values);

	int join(std::string table1, std::string table2, std::string thecolumn,
			std::string on_constraint, std::list<int>& out_values);

	void unity_tests();

private:
	// members

	/**
	 * Pointer to the database
	 */
	sqlite3 *m_db;

	/**
	 * flag that tells if the database is open or not
	 */
	bool m_db_is_open;



	void string_to_int(std::list<std::string> inlist, std::list<int>& outlist);
	void string_to_double(std::list<std::string> inlist,
			std::list<double>& outlist);

};

#endif /* DATABASE_H_ */
